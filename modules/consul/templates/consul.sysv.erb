#!/bin/bash
#
#       /etc/rc.d/init.d/consul
#
#       Daemonize the consul agent.
#
# chkconfig:   2345 95 20
# description: Service discovery and configuration made easy. \
#  Distributed, highly available, and datacenter-aware.
# processname: consul
# pidfile: /var/run/consul/pidfile

# Source function library.
. /etc/init.d/functions

CONSUL=<%= scope.lookupvar('consul::bin_dir') %>/consul
CONFIG=<%= scope.lookupvar('consul::config_dir') %>
PID_FILE=/var/run/consul/consul.pid
LOG_FILE=/var/log/consul
RPC_ADDR=-rpc-addr=<%= scope.lookupvar('consul::rpc_addr') %>:<%= scope.lookupvar('consul::rpc_port') %>

[ -e /etc/sysconfig/consul ] && . /etc/sysconfig/consul

export GOMAXPROCS=${GOMAXPROCS:-2}

#
# Create the /var/run/consul directory, which can live on a tmpfs
# filesystem and be destroyed between reboots.
#
mkrundir() {
        [ ! -d /var/run/consul ] && mkdir -p /var/run/consul
        chown <%= scope.lookupvar('consul::user') %> /var/run/consul
}

#
# Create a PID file if it doesn't already exist, for clean upgrades
# from previous init-script controlled daemons.
#
KILLPROC_OPT="-p ${PID_FILE}"
mkpidfile() {
        # Create PID file if it didn't exist
        mkrundir
        [ ! -f $PID_FILE ] && pidofproc $CONSUL > $PID_FILE
        chown <%= scope.lookupvar('consul::user') %> /var/run/consul
        if [ $? -ne 0 ] ; then
            rm $PID_FILE
            KILLPROC_OPT=""
        fi
}

start() {
        echo -n "Starting consul: "
        mkrundir
        [ -f $PID_FILE ] && rm $PID_FILE
        daemon --user=<%= scope.lookupvar('consul::user') %> \
            --pidfile="$PID_FILE" \
            "$CONSUL" agent -pid-file "${PID_FILE}" -config-dir "$CONFIG" <%= scope.lookupvar('consul::extra_options') %> >> "$LOG_FILE" &
        retcode=$?
        touch /var/lock/subsys/consul
        return $retcode
}

stop() {
        DELAY=5 # seconds maximum to wait for a leave

        echo -n "Shutting down consul: "
        mkpidfile

        # If consul is not acting as a server, exit gracefully
        # Use SIGINT to create a "leave" event, unless the user has explicitly
        # changed that behavior in the Consul config.
        if ("${CONSUL}" info ${RPC_ADDR} 2>/dev/null | grep -q 'server = false' 2>/dev/null) ; then
            consul_pid=$(cat $PID_FILE)
            killproc $KILLPROC_OPT $CONSUL -INT
            retcode=$?

            # We'll wait if necessary to make sure the leave works, and return
            # early if we can.  If not, escalate to harsher signals.
            try=0
            while [ $try -lt $DELAY ]; do
                if ! checkpid $consul_pid ; then
                    rm -f /var/lock/subsys/consul
                    return $retcode
                fi
                sleep 1
                let try+=1
            done
        fi

        # If acting as a server, use a SIGTERM to avoid a leave.
        # This behavior is also configurable.  Avoid doing a "leave" because
        # having servers missing is a bad thing that we want to notice.
        #
        # A SIGTERM will mark the node as "failed" until it rejoins.
        # killproc with no arguments uses TERM, then escalates to KILL.
        killproc $KILLPROC_OPT $CONSUL
        retcode=$?

        rm -f /var/lock/subsys/consul $PID_FILE
        return $retcode
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        "$CONSUL" info ${RPC_ADDR}
        ;;
    restart)
        stop
        start
        ;;
    reload)
        mkpidfile
        killproc $KILLPROC_OPT $CONSUL -HUP
        ;;
    condrestart)
        [ -f /var/lock/subsys/consul ] && restart || :
        ;;
    *)
        echo "Usage: consul {start|stop|status|reload|restart}"
        exit 1
        ;;
esac
retcode=$?
# Don't let the [OK] get stomped on.
echo
exit $retcode
